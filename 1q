use super::erc20::{Convert, TOKEN_DATA};
use bigdecimal::BigDecimal;
use ethers::providers::{Provider, Ws};
use once_cell::sync::Lazy;
use std::collections::HashMap;
use std::sync::Arc;

const WS_URL: &str = "ws://localhost:8546";
pub static TOKEN_PRICE_HASH: Lazy<HashMap<String, BigDecimal>> = Lazy::new();

pub async fn generate_token_price_hash(
) -> Result<HashMap<String, BigDecimal>, Box<dyn std::error::Error>> {
    let provider = Provider::<Ws>::connect(WS_URL).await?;
    let client = Arc::new(provider);
    let mut token_price_hash = HashMap::<String, BigDecimal>::new();

    for token in TOKEN_DATA.values() {
        let token_price = token.get_token_oracle_price(&client).await?;
        token_price_hash.insert(token.address.to_lowercase(), token_price);
    }

    Ok(token_price_hash)
}
